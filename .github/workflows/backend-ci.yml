name: Backend CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: cd backend && npm ci

      - name: Build
        run: echo "Build backend"

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: honey123
          POSTGRES_DB: honey_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_NAME: honey_test
      DB_USER: postgres
      DB_PASSWORD: honey123
      DB_HOST: localhost
      DB_PORT: 5432
      JWT_SECRET: secret
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Create test database
        run: |
          sudo apt-get install -y postgresql-client
          PGPASSWORD=honey123 psql -h localhost -U postgres -p 5432 -c "CREATE DATABASE honey_test;" || true

      - name: Sync database schema
        run: node backend/scripts/syncDb.js

      - name: Run backend tests
        run: cd backend && npm run test:coverage
    
  analyze:
    runs-on: ubuntu-latest
    needs: [build, test]
    env:
      DB_NAME: honey_test
      DB_USER: postgres
      DB_PASSWORD: honey123
      DB_HOST: localhost
      DB_PORT: 5432
      JWT_SECRET: secret
      NODE_ENV: test

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: honey123
          POSTGRES_DB: honey_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install backend dependencies
        run: cd backend && npm ci

      - name: Create test database
        run: |
          sudo apt-get install -y postgresql-client
          PGPASSWORD=honey123 psql -h localhost -U postgres -p 5432 -c "CREATE DATABASE honey_test;" || true

      - name: Sync database schema
        run: node backend/scripts/syncDb.js

      - name: Run test coverage
        run: cd backend && npm run test:coverage

      - name: SonarQube scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_BACKEND_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: backend/.scannerwork/report-task.txt
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_BACKEND_TOKEN }}

  docker-push:
    runs-on: ubuntu-latest
    needs: [build, test, analyze]  # дождаться завершения job 'build'
    if: github.ref == 'refs/heads/main'  # только для main

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          platforms: linux/arm64
          tags: ${{ secrets.DOCKER_USERNAME }}/honey-backend:latest

  notify:
    runs-on: ubuntu-latest
    needs: [build, test, analyze, docker-push]
    if: always()
    steps:
      - name: Send Telegram Notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_ID: ${{ secrets.TELEGRAM_ID }}
        run: |
          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.analyze.result }}" == "success" && "${{ needs.docker-push.result }}" == "success" ]]; then
            STATUS="успешно"
            ICON="✅"
          else
            STATUS="ошибка"
            ICON="❌"
          fi

          MESSAGE="${ICON} Honey Backend CI завершился со статусом: *${STATUS}*"
          MESSAGE="${MESSAGE}%0A➡️ [Открыть workflow](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})"

          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_ID}" \
            -d parse_mode="Markdown" \
            -d text="${MESSAGE}"
          
