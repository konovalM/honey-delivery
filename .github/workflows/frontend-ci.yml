name: Frontend CI

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Build project
        run: cd frontend && npm run build

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: frontend/dist

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Run tests
        run: cd frontend && npm run test
  
  analyze:
    runs-on: ubuntu-latest
    needs: [build, test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  #важно для Sonar

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Run test coverage (для отчета Sonar)
        run: cd frontend && npm run test:coverage

      - name: SonarQube scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: frontend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_FRONTEND_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: frontend/.scannerwork/report-task.txt
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_FRONTEND_TOKEN }}

  docker-push:
    runs-on: ubuntu-latest
    needs: [build, test, analyze]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: frontend/dist

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKER_USERNAME }}/honey-frontend:latest
  
  notify:
    runs-on: ubuntu-latest
    needs: [build, test, docker-push, analyze]
    if: always()
    steps:
      - name: Send Telegram Notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_ID: ${{ secrets.TELEGRAM_ID }}
        run: |
          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.analyze.result }}" == "success" && "${{ needs.docker-push.result }}" == "success" ]]; then
            STATUS="успешно"
            ICON="✅"
          else
            STATUS="ошибка"
            ICON="❌"
          fi

          MESSAGE="${ICON} Honey Frontend CI завершился со статусом: *${STATUS}*"
          MESSAGE="${MESSAGE}%0A➡️ [Открыть workflow](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})"

          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_ID}" \
            -d parse_mode="Markdown" \
            -d text="${MESSAGE}"

  trigger-deploy:
    if: github.ref == 'refs/heads/main' && success()
    runs-on: ubuntu-latest
    needs: [docker-push] 
    steps:
      - name: Trigger Deploy
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          event-type: deploy